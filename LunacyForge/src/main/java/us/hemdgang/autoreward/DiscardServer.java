/* This Java source file was generated by the Gradle 'init' task. */
package us.hemdgang.autoreward;

import io.netty.bootstrap.ServerBootstrap;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelHandler;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelInboundHandlerAdapter;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelOption;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioServerSocketChannel;
import io.netty.util.ReferenceCountUtil;

public class DiscardServer {

    public static void main(String[] args) throws Exception {
	final int port = 8080;

	new DiscardServer(port).run();
    }

    public void run() throws Exception {
	EventLoopGroup bossGroup = new NioEventLoopGroup();
	EventLoopGroup workerGroup = new NioEventLoopGroup();

	try {

	    // bootstrap sets up the server (can be down without bootstrap but is tedious)
	    ServerBootstrap b = new ServerBootstrap();
	    b.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).childHandler(new ChannelInitializer<SocketChannel>() {

		@Override
		protected void initChannel(SocketChannel ch) throws Exception {
		    ch.pipeline().addLast(new DiscardServerHandler());
		}

	    }).option(ChannelOption.SO_BACKLOG, 128).childOption(ChannelOption.SO_KEEPALIVE, true);

	    // Bind and start to accept incoming connections
	    ChannelFuture f = b.bind(port).sync();

	    // Wait until the server socket is closed
	    // In this example this does not happen
	    f.channel().closeFuture().sync();
	} finally {
	    workerGroup.shutdownGracefully();
	    bossGroup.shutdownGracefully();
	}

    }

    private int port;

    public DiscardServer(int port) {
	this.port = port;
    }

}